// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sgraham785/gocleanarch-example/internal/book/usecase (interfaces: BookUseCase)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	xid "github.com/rs/xid"
	entity "github.com/sgraham785/gocleanarch-example/internal/book/entity"
)

// MockBookUseCase is a mock of BookUseCase interface.
type MockBookUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBookUseCaseMockRecorder
}

// MockBookUseCaseMockRecorder is the mock recorder for MockBookUseCase.
type MockBookUseCaseMockRecorder struct {
	mock *MockBookUseCase
}

// NewMockBookUseCase creates a new mock instance.
func NewMockBookUseCase(ctrl *gomock.Controller) *MockBookUseCase {
	mock := &MockBookUseCase{ctrl: ctrl}
	mock.recorder = &MockBookUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookUseCase) EXPECT() *MockBookUseCaseMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookUseCase) CreateBook(arg0, arg1 string, arg2, arg3 int) (xid.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(xid.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookUseCaseMockRecorder) CreateBook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookUseCase)(nil).CreateBook), arg0, arg1, arg2, arg3)
}

// DeleteBook mocks base method.
func (m *MockBookUseCase) DeleteBook(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookUseCaseMockRecorder) DeleteBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookUseCase)(nil).DeleteBook), arg0)
}

// GetBook mocks base method.
func (m *MockBookUseCase) GetBook(arg0 string) (*entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0)
	ret0, _ := ret[0].(*entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookUseCaseMockRecorder) GetBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookUseCase)(nil).GetBook), arg0)
}

// ListBooks mocks base method.
func (m *MockBookUseCase) ListBooks() ([]*entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks")
	ret0, _ := ret[0].([]*entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBookUseCaseMockRecorder) ListBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookUseCase)(nil).ListBooks))
}

// SearchBooks mocks base method.
func (m *MockBookUseCase) SearchBooks(arg0 string) ([]*entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBooks", arg0)
	ret0, _ := ret[0].([]*entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBooks indicates an expected call of SearchBooks.
func (mr *MockBookUseCaseMockRecorder) SearchBooks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBooks", reflect.TypeOf((*MockBookUseCase)(nil).SearchBooks), arg0)
}

// UpdateBook mocks base method.
func (m *MockBookUseCase) UpdateBook(arg0 *entity.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookUseCaseMockRecorder) UpdateBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookUseCase)(nil).UpdateBook), arg0)
}
